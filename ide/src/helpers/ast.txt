(program (statement (constantDeclaration const PI (typeAnnotation : (type (baseType integer))) = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 314)))))))))))) ;)) (statement (variableDeclaration let greeting (typeAnnotation : (type (baseType string))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Hello, Compiscript!"))))))))))))) ;)) (statement (variableDeclaration let flag (typeAnnotation : (type (baseType boolean))) ;)) (statement (variableDeclaration let numbers (typeAnnotation : (type (baseType integer) [ ])) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr (arrayLiteral [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 2)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 3)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 4)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 5)))))))))))) ])))))))))))))) ;)) (statement (variableDeclaration let matrix (typeAnnotation : (type (baseType integer) [ ] [ ])) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr (arrayLiteral [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr (arrayLiteral [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 2)))))))))))) ]))))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr (arrayLiteral [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 3)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 4)))))))))))) ]))))))))))))) ])))))))))))))) ;)) (statement (functionDeclaration function makeAdder ( (parameters (parameter x : (type (baseType integer)))) ) : (type (baseType integer)) (block { (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom x))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ;)) }))) (statement (variableDeclaration let addFive (typeAnnotation : (type (baseType integer))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom makeAdder) (suffixOp ( (arguments (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 5))))))))))))) )))))))))))))) ))))))))))))) ;)) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "5 + 1 = ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive))))))))))))) ) ;)) (statement (ifStatement if ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive)))))) > (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 5)))))))))))) ) (block { (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Greater than 5")))))))))))) ) ;)) }) else (block { (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "5 or less")))))))))))) ) ;)) }))) (statement (whileStatement while ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive)))))) < (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 10)))))))))))) ) (block { (statement (assignment addFive = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ;)) }))) (statement (doWhileStatement do (block { (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Result is now ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive))))))))))))) ) ;)) (statement (assignment addFive = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive))))) - (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ;)) }) while ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive)))))) > (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 7)))))))))))) ) ;)) (statement (forStatement for ( (variableDeclaration let i (typeAnnotation : (type (baseType integer))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 0))))))))))))) ;) (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom i)))))) < (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 3)))))))))))) ; (expression (assignmentExpr (leftHandSide (primaryAtom i)) = (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom i))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1))))))))))))) ) (block { (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Loop index: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom i))))))))))))) ) ;)) }))) (statement (foreachStatement foreach ( n in (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom numbers))))))))))))) ) (block { (statement (ifStatement if ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n))))))) == (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 3)))))))))))) ) (block { (statement (continueStatement continue ;)) }))) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Number: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n))))))))))))) ) ;)) (statement (ifStatement if ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))))) > (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 4)))))))))))) ) (block { (statement (breakStatement break ;)) }))) }))) (statement (switchStatement switch ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom addFive))))))))))))) ) { (switchCase case (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 7)))))))))))) : (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "It's seven")))))))))))) ) ;))) (switchCase case (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 6)))))))))))) : (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "It's six")))))))))))) ) ;))) (defaultCase default : (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Something else")))))))))))) ) ;))) })) (statement (tryCatchStatement try (block { (statement (variableDeclaration let risky (typeAnnotation : (type (baseType integer))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom numbers) (suffixOp [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 10)))))))))))) ])))))))))))))) ;)) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Risky access: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom risky))))))))))))) ) ;)) }) catch ( err ) (block { (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Caught an error: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom err))))))))))))) ) ;)) }))) (statement (classDeclaration class Animal { (classMember (variableDeclaration let name (typeAnnotation : (type (baseType string))) ;)) (classMember (functionDeclaration function constructor ( (parameters (parameter name : (type (baseType string)))) ) (block { (statement (assignment (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom this))))))))))))) . name = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom name))))))))))))) ;)) }))) (classMember (functionDeclaration function speak ( ) : (type (baseType string)) (block { (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom this) (suffixOp . name))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr " makes a sound.")))))))))))) ;)) }))) })) (statement (classDeclaration class Dog : Animal { (classMember (functionDeclaration function speak ( ) : (type (baseType string)) (block { (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom this) (suffixOp . name))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr " barks.")))))))))))) ;)) }))) })) (statement (variableDeclaration let dog (typeAnnotation : (type (baseType Dog))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom new Dog ( (arguments (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Rex"))))))))))))) ))))))))))))))) ;)) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom dog) (suffixOp . speak) (suffixOp ( )))))))))))))) ) ;)) (statement (variableDeclaration let first (typeAnnotation : (type (baseType integer))) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom numbers) (suffixOp [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 0)))))))))))) ])))))))))))))) ;)) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "First number: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom first))))))))))))) ) ;)) (statement (functionDeclaration function getMultiples ( (parameters (parameter n : (type (baseType integer)))) ) : (type (baseType integer) [ ]) (block { (statement (variableDeclaration let result (typeAnnotation : (type (baseType integer) [ ])) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr (arrayLiteral [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (literalExpr 1)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (literalExpr 2)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (literalExpr 3)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (literalExpr 4)))))))))))) , (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (literalExpr 5)))))))))))) ])))))))))))))) ;)) (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom result))))))))))))) ;)) }))) (statement (variableDeclaration let multiples (typeAnnotation : (type (baseType integer) [ ])) (initializer = (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom getMultiples) (suffixOp ( (arguments (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 2))))))))))))) ))))))))))))))) ;)) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Multiples of 2: ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom multiples) (suffixOp [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 0)))))))))))) ]))))) + (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr ", ")))) + (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom multiples) (suffixOp [ (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ]))))))))))))) ) ;)) (statement (functionDeclaration function factorial ( (parameters (parameter n : (type (baseType integer)))) ) : (type (baseType integer)) (block { (statement (ifStatement if ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))))) <= (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ) (block { (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1)))))))))))) ;)) }))) (statement (returnStatement return (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n)))) * (unaryExpr (primaryExpr (leftHandSide (primaryAtom factorial) (suffixOp ( (arguments (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (leftHandSide (primaryAtom n))))) - (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr 1))))))))))))) )))))))))))))) ;)) }))) (statement (printStatement print ( (expression (assignmentExpr (conditionalExpr (logicalOrExpr (logicalAndExpr (equalityExpr (relationalExpr (additiveExpr (multiplicativeExpr (unaryExpr (primaryExpr (literalExpr "Program finished.")))))))))))) ) ;)) <EOF>)